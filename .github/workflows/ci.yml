name: CI

on:
  pull_request:
  push:
    branches: [ main, master ]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, macos-13]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Ensure Homebrew up-to-date
        run: |
          brew update-reset || brew update
      - name: Tap this repository
        run: brew tap "${{ github.repository }}"
      - name: Show taps
        run: brew tap
      - name: Compute formula list
        id: formulas
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "pull_request" ] && [ -n "${{ github.event.pull_request.base.sha }}" ]; then
            git fetch --no-tags --prune --depth=1 origin "${{ github.event.pull_request.base.sha }}"
            CHANGED=$(git diff --name-only "${{ github.event.pull_request.base.sha }}"...HEAD || true)
            FILES=$(printf "%s\n" "$CHANGED" | grep '^Formula/.*\\.rb$' || true)
          else
            FILES=$(ls Formula/*.rb 2>/dev/null || true)
          fi
          NAMES=$(for f in $FILES; do basename "$f" .rb; done | sort -u)
          if [ -z "$NAMES" ]; then
            echo "formulae=pretty-git" >> "$GITHUB_OUTPUT"
          else
            echo "formulae=$NAMES" >> "$GITHUB_OUTPUT"
          fi
      - name: Style
        run: brew style --fix
      - name: Audit
        run: |
          brew untap "${{ github.repository }}" || true
          brew tap "${{ github.repository }}"
          for f in ${{ steps.formulas.outputs.formulae }}; do
            echo "Auditing $f";
            brew audit --strict --online "$f";
          done
      - name: Install
        run: |
          set -euxo pipefail
          brew untap "${{ github.repository }}" || true
          brew tap "${{ github.repository }}"
          for f in ${{ steps.formulas.outputs.formulae }}; do
            echo "Installing $f";
            brew install --build-from-source --formula "$f";
            brew info "$f";
          done
      - name: Test
        run: |
          for f in ${{ steps.formulas.outputs.formulae }}; do
            echo "Testing $f";
            brew test "$f";
          done
